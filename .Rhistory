testing <-Wage[-inTrain,]
eaturePlot(x=training[c("age", "education", "jobclass"),],
y=training$wage,
plot="pairs")
featurePlot(x=training[c("age", "education", "jobclass"),],
y=training$wage,
plot="pairs")
str(training)
featurePlot(x=training[c("age", "education", "jobclass"),],
y=training$wage,
plot="pairs")
featurePlot(x=training[,c("age", "education", "jobclass")],
y=training$wage,
plot="pairs")
qplot(age, wage, colour=jobclass, data-training)
qplot(age, wage, colour=jobclass, data=training)
library(hmisc)
library(Hmisc)
cutWage=cut2(training$wage, g=3)
table(cutWage)
qplot(cutWage, age, geometry="boxplot")
qplot(cutWage, age, geometry="boxplot", data=training)
qplot(cutWage, age, geom=c("boxplot"), data=training, fill=cutWage)
qplot(cutWage, age, geom=c("boxplot", "jitter"), data=training, fill=cutWage)
p1<-qplot(cutWage, age, geom=c("boxplot"), data=training, fill=cutWage)
p2<-qplot(cutWage, age, geom=c("boxplot", "jitter"), data=training, fill=cutWage)
grid.arrange(p1,p2,ncol=2)
t1<-table(cutWage, training$jobclass)
t1
prop.table(t1,1)
qplot(wage, geom=c("density"), color="education", data=training)
qplot(wage, geom=c("density"), color=education, data=training)
inTrain<-createDataPartition(y=spam$type, p=0.75, list=FALSE);
training<-spam[inTrain,]
testing <-spam[-inTrain,]
preObj<-preProcess(training[,-58], method=c("scale","center"))
str(preObj)
trainCapAves<-predict(preObj, training[,-58])
trainCapAves[1:10,1:10]
trainCapAves<-predict(preObj, training[,-58])$capitalAve
dim(trainCapAves)
trainCapAves<-predict(preObj, training[,-58])$capitalAve
trainCapAves
modelFit<-train(type~., data=training, prePorcess=c("center", "scale"), method=glm)
str(training)
dim(training)
dim(training)[1]
selectNA<-rbinom(dim(training)[1], size=1, p=0.05)
selectNA
selectNA<-rbinom(dim(training)[1], size=1, p=0.05)==1
selectNA
training$capAve<-training$capitalAve
training$capAve([selectNA])=NA
training$capAve[selectNA]=NA
preObj<-preProcess(training[,-58], method="knnImpute")
capAve<-predict(preObj, training[,-58])$capAve
install.packages("RANN")
capAve<-predict(preObj, training[,-58])$capAve
library(caret); library(kernlab);data(spam);
inTrain<-createDataPartition(y=spam$type, p=0.75, list=FALSE);
training<-spam[inTrain,]
testing <-spam[-inTrain,]
smallSpam<-spam[,c(34,32)]
prComp<-prcomp(smallSpam)
str(prComp)
preProc=preProcess(log10(spam[,-58]),method=pca, pcaComp=2)
preProc=preProcess(log10(spam[,-58]),method="pca", pcaComp=2)
preProc=preProcess(log10(spam[,-58]+1),method="pca", pcaComp=2)
str(preProc)
str(training)
spamPC<-predict(preProc, log10(spam[,-58]+1))
str(spamPC)
plot(spamPC[,1], spamPC[,2], col=typeColor)
head(training[,-58])
head(log10(training[,-58]))
head(log10(training[,-58]+1))
preProc=preProcess(spam[,-58],method="pca", pcaComp=2)
head(preProc)
str(preProc)
str(spam)
head(preProc$rotation)
head(log(spam[,-58]+1))
str(preProc$rotation)
sumamry(spam$make)
summary(spam$make)
preProc=preProcess(spam[,-58],method="pca", pcaComp=5)
head(preProc$rotation)
library(caret); library(kernlab);data(spam);
inTrain<-createDataPartition(y=spam$type, p=0.75, list=FALSE);
training<-spam[inTrain,]
testing <-spam[-inTrain,]
smallSpam<-spam[,c(34,32)]
prComp<-prcomp(smallSpam)
prComp
str(prComp)
head(smallSpam)
str(smallSpam)
typeColor=((spam$type==1)*1+1)
head(typeColor)
prComp=prcomp(log10(spam[,-58])+1)
prComp=prcomp(log10(spam[,-58]+1))
str(prComp)
head(prComp)
head(prComp$rotation)
size(prComp$rotation[,1])
size(prComp$rotation)
dim(prComp$rotation)
str(prComp)
plot(prComp$x[,1], prComp$x[,2], col=typeColor, xlab="PC1", ylab="PC2")
typeColor=((spam$type==1)*1+1)
typeColor
spam$type==1
preProc=preProcess(log10(spam[,-58]+1), method=pca, pcaComp=2)
preProc=preProcess(log10(spam[,-58]+1), method="pca", pcaComp=2)
str(preProc)
head(preProc$rotation)
spamPC<-predict(preproc, log10(spam[,-58]+1))
spamPC<-predict(preProc, log10(spam[,-58]+1))
str(spamPC)
head(spamPC)
testPC<-predict(preProc, log10(testing[,-58]+1))
preProc<-preProcess(log10(training[,-58]+1), method="pca", pcaComp=2)
trainPC<-predict(preProc, log10(training[,-58]+1))
str(trainPC)
modelFit<-train(training$type~., method="glm",data=trainPC)
str(modelFit)
modelFit<-train(training$type~., method="glm",data=trainPC)
testPC<-predict(preProc, log10(testing[,-58]+1))
confusionMatrix(testing$type, predict(modelFit, testPC))
library(caret); library(kernlab);
data(faithful)
setseed(333)
setSeed(333)
set.seed(333)
trainFaith<-createDataPartition(y=faithful$waiting, p=0.5, list=FALSE)
head(trainFaith)
inTrain<-createDataPartition(y=faithful$waiting, p=0.5, list=FALSE)
trainFaith<-faithful[inTrain,]
testFaith<-faithful[-inTrain,]
head(trainFaith)
lm1<-lm(eruptions~waiting, data=trainFaith)
summary(lm1)
plot(trainFaith$waiting, trainFaith$eruptions, pch=19, xlab="waiting", ylab="eruptions")
plot(trainFaith$waiting, trainFaith$eruptions, pch=19, color=blue, xlab="waiting", ylab="eruptions")
plot(trainFaith$waiting, trainFaith$eruptions, pch=19, color="blue", xlab="waiting", ylab="eruptions")
plot(trainFaith$waiting, trainFaith$eruptions, pch=19, col="blue", xlab="waiting", ylab="eruptions")
warinings()
warnings()
plot(trainFaith$waiting, trainFaith$eruptions, pch=19, col="blue", xlab="waiting", ylab="eruptions")
lines(trainFaith$waiting, lm1$fitted, lwd=3)
newdata<-data.frame(waiting=80)
predict(lm1, newdata)
RMSE<-sqrt((lm1$fitted-trainFaith$waiting)^2)
RMSE
RMSE<-sqrt(sum(lm1$fitted-trainFaith$waiting)^2)
RMSE
RMSE<-sqrt(sum((lm1$fitted-trainFaith$waiting)^2)
)
RMSE<-sqrt(sum((lm1$fitted-trainFaith$waiting)^2))
RMSE
RMSE<-sqrt(sum((lm1$fitted-trainFaith$eruptions)^2))
RMSE
pred1<-predict(lm1, newdata=testFaith, interval="prediction")
ord<-order(testFaith$waiting)
str(pred1)
ord
testFaith$waiting
order(testFaith$waiting)
plot(testFaith$waiting, testFaith$eruptions, pch=19, col="blue", xlab="waiting", ylab="eruptions")
matlines(testFaith$waiting[ord], pred1[ord,], type="l", col=c(1,2,2), lty=c(1,1,1), lwd=3)
modFit<-train(eruptions~waiting, data=trainFaith, method="lm")
summary(modFit$finalmodel)
trainFaith
modFit<-train(eruptions ~ waiting, data=trainFaith, method="lm")
summary(modFit$finalmodel)
summary(modFit$finalModel)
data(Wage)
library(ISLR
)
data(Wage)
str(Wage)
Wage<--c(logwage)
Wage<-subset(Wage,select=-c(logwage))
str(Wage)
inTrain<-createDataParition(y=Wage$wage, p=0.7, list=FALSE)
inTrain<-createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training<-Wage[inTrain,]
testing<-Wage[-inTrain,]
qplot(age,wage, colour="education", data=training)
qplot(age, wage, colour=education, data=training)
modFit<-train(wage~age+jobclass+education)
modFit<-train(wage~age+jobclass+education, method="lm", data=training)
finMod<-modFit$finalModel
qplot(finMod$fitted, finMod$residuals, colour=race, data=training)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
summary(training$SuperPlasticizer)
str(training)
hist(training$Superplasticizer)
summary(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer)+1)
hist(log(training$Superplasticizer+1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
grepl(names(training), "IL")
grepl("IL", names(training))
ILtraining<-training[,grepl("IL", names(training))]
str(ILtraining)
ILtraining<-training[,grepl("^IL", names(training))]
str(ILtraining)
ILpreProc=preProcess(ILtraining,method="pca", p=0.8)
str(ILpreProc)
ILpreProc=preProcess(ILtraining,method="pca", prob=0.8)
str(ILpreProc)
str(ILpreProc)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
head(training$diagnosis)
ILtraining<-training[,grepl("^IL", names(training))]
training$diagnosis[,grepl("^IL", names(training))]
training$diagnosis[grepl("^IL", names(training))]
ILtraining<-cbind(ILtraining, training$diagnosis[grepl("^IL", names(training))])
ILtraining<-cbind(ILtraining, training[,grepl("^IL", names(training))]$diagnosis)
training[,grepl("^IL", names(training))]$diagnosis
training[,grepl("^IL", names(training))]$diagnosis
head(training$diagnosis)
ILtraining<-cbind(ILtraining, training$diagnosis)
str(ILtraining)
str(training)
names(ILtraining)
names(ILtraining)[13]<-diagnosis
names(ILtraining)[13]<-"diagnosis"
names(ILtraining)
modelAsIs<-train(diagnosis~.,method="glm")
modelAsIs<-train(diagnosis~.,method="glm", data=ILtraining)
summary(modelAsIs)
str(modelAsIs)
modelAsIs$Accuracy
modelAsIs
ILtesting<-testing[,grepl("^IL", names(testing))]
ILtesting<-cbind(ILtesting, testing$diagnosis
)
names(ILtesting)[13]<-"diagnosis"
predict(modelAsis, newdata=ILtesting)
modelAsIs<-train(diagnosis~.,method="glm", data=ILtraining)
predict(modelAsIs, newdata=ILtesting)
confusionMatrix(testing$diagnosis, predict(modelAsIs, ILtesting))
ILpreProc=preProcess(ILtraining,method="pca", prob=0.8)
ILpreProc=preProcess(ILtraining[,-diagnosis],method="pca", prob=0.8)
ILpreProc=preProcess(ILtraining[,-"diagnosis"],method="pca", prob=0.8)
ILtraining[,-diagnosis]
str(ILtraining)
ILtraining[-diagnosis,]
ILtraining[-13,]
ILtraining[13,]
ILtraining[,13]
ILtraining[,-13]
ILpreProc=preProcess(ILtraining[,-13],method="pca", prob=0.8)
confusionMatrix(testing$diagnosis, predict(ILpreProc, ILtesting))
confusionMatrix(testing$diagnosis, predict(ILpreProc, ILtesting[,-13]))
predict(ILpreProc, ILtesting[,-13])
ILpreProc<-preProcess(ILtraining[,-13],method="pca", prob=0.8)
testPC<-predict(ILpreProc, ILtesting[,-13]))
testPC<-predict(ILpreProc, ILtesting[,-13])
testPC<-predict(ILpreProc, ILtraining[,-13])
modelFit<-train(ILtraining$diagnosis~., method="glm",data=ILPreProc)
modelFit<-train(ILtraining$diagnosis~., method="glm",data=ILpreProc)
modelFit<-train(ILtraining$diagnosis~., method="glm",data=ILpreProc)
testPC<-predict(ILpreProc, ILtesting[,-13])
str(testPC)
confusionMatrix(testing$diagnosis, predict(ILpreProc, ILtraining[,-13]))
modelFit<-train(ILtraining$diagnosis~., method="glm",data=ILpreProc)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILtraining<-training[,grepl("^IL", names(training))]
ILpreProc=preProcess(ILtraining,method="pca", prob=0.9)
ILpreProc
ILpreProc=preProcess(ILtraining,method="pca", p=0.9)
ILpreProc
ILpreProc=preProcess(ILtraining,method="pca", probability=0.9)
ILpreProc
ILpreProc=preProcess(ILtraining,method="pca", probability=0.90)
ILpreProc
ILpreProc=preProcess(ILtraining,method="pca", pcaComp=7)
ILpreProc
str(ILpreProc)
ILpreProc=preProcess(ILtraining,method="pca", pcaComp=5)
str(ILpreProc)
ILpreProc=preProcess(ILtraining,method="pca", thresh=0.90)
ILpreProc
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
library(ISLR);library(ggplot2);library(caret)
library(caret); library(kernlab);data(spam);
inTrain<-createDataPartition(y=spam$type, p=0.75, list=FALSE);
training<-spam[inTrain,]
testing <-spam[-inTrain,]
preProc<-preProcess(log10(training[,-58]+1), mathod="pca", numcomp=2)
trainPC<-train(log10(training[,-58]+1, preProc)
)
trainPC<-train(preProc, log10(training[,-58]+1))
trainPC<-train(preProc,log10(training[,-58]+1))
str(preproc)
str(preProc)
preProc<-preProcess(log10(training[,-58]+1), method="pca", numcomp=2)
trainPC<-train(preProc,log10(training[,-58]+1))
preProc<-preProcess(log10(training[,-58]+1), method="pca", pcaComp=2)
trainPC<-train(preProc,log10(training[,-58]+1))
preProc<-preProcess(log10(training[,-58]+1), method="pca", pcaComp=2)
trainPC<-predict(preProc,log10(training[,-58]+1))
modelFit<-train(training$type ~ ., method="glm", data=trainPC )
confusionMatrix(testing$type, modelFit)
testPC<-predict(preProc,log10(ttesting[,-58]+1))
testPC<-predict(preProc,log10(testing[,-58]+1))
confusionMatrix(testing$type,predict(modelFit, testPC))
str(trainPC)
str(testPC)
str(preProc)
str(modelFit)
modelFit
str(trainPC)
dim(trainPC)
dim(training)
head(trainPC)
head(testPC)
6*30.87+4*160.86+(39701-39255)*5.03
60000+3072+205-6573
getSymbols("YHOO",src="google")
library(quantmod)
getSymbols("YHOO",src="google")
getSymbols("GOOG", src="google")
?getSymbols
setSymbolLookup(QQQ='yahoo',SPY='google')
getSymbols(c('QQQ','SPY'))
getSymbols('F',src='yahoo',return.class='ts')
data.env <- new.env()
getSymbols("YHOO", env=data.env)
ls.str(data.env)
attach(NULL, name="DATA.ENV")
getSymbols("AAPL", env=as.environment("DATA.ENV"))
ls("DATA.ENV")
detach("DATA.ENV")
getSymbols("GOOG", src="google", auto.assign=FALSE)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from=from.dat, to=to.dat)
head(GOOG)
invisible(Sys.setlocale("LC_MESSAGES", "C"))
invisible(Sys.setlocale("LC_TIME", "C"))
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from=from.dat, to=to.dat)
head(GOOG)
mGOOG <_ to.monthly(GOOG)
mGOOG <- to.monthly(GOOG)
head(mGOOG)
to.Monthly(GOOG)
to.monthly(GOOG)
library(lubridate)
to.monthly(GOOG)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from=from.dat, to=to.dat)
invisible(Sys.setlocale("LC_MESSAGES", "C"))
invisible(Sys.setlocale("LC_TIME", "C"))
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from=from.dat, to=to.dat)
head(GOOG)
to.monthly(GOOG)
str(GOOG)
to.monthly(GOOG)
?to.monthly
class(GOOG)
to.monthly(GOOG)
str(GOOG)
googOpen <- Op(GOOG)
mGoog <- to.period(googOpen, 'months')
ts1 <-ts(googOpen, frequence=12)
plot(ts1, xlab="Years+1", ylab="GOOG")
ts1 <-ts(googOpen, frequence=12)
plot(ts1, xlab="Years+1", ylab="GOOG")
googOpen <- to.period(Op(GOOG), "monthly")
googOpen <- to.period(Op(GOOG), "monthly")
googOpen <- to.period(Op(GOOG), "monthly")
googOpen <- Op(GOOG)
mGoog <- to.period(googOpen, 'months')
str(mGoog)
str(GoogOpen)
str(googOpen)
?Op
ts1 <-ts(googOpen, frequency=12)
plot(ts1, xlab="Years+1", ylab="GOOG")
str(ts1)
plot(decompose(ts1))
ts1Train <-window(ts1, start=1, end=5)
ts1Test <-window(ts1, start=5, end=(7-0.01))
ts1Train
str(ts1Train)
dim(ts1Train)
ets1<-ets(ts1Train, model="MMM")
library(caret)
ets1<-ets(ts1Train, model="MMM")
library(forecast)
ets1<-ets(ts1Train, model="MMM")
fcast<-forecast(ets1)
plot(fcast)
lines(ts1Test, col="red")
accuracy(fcast, Ts1Test)
ts1Train <-window(ts1, start=1, end=5)
ts1Test <-window(ts1, start=5, end=(7-0.01))
accuracy(fcast, Ts1Test)
accuracy(fcast, ts1Test)
29.30-8.60
34.10-5-4.70
26-5,60
26-5.60
25.80-8.60
shiny::runApp('DataAnalysis/Assignment/courseprojects/course9/shinytutorial/app2')
shiny::runApp('DataAnalysis/Assignment/courseprojects/course9/shinytutorial/app2')
shiny::runApp('DataAnalysis/Assignment/courseprojects/course9/shinytutorial/app2')
library(rCharts)
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("plyr")
require(devtools)
find_rtools()
find_rtools()
require(devtools)
find_rtools()
library(Rcharts)
install_github('rCharts', 'ramnathv')
library(rCharts)
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
install.packages("stringr")
install.packages("stringr")
setwd("~/DataAnalysis/Assignment/courseprojects/course9/courseProject")
shiny::runApp()
rangeD<-525
rangeU<-560
wineDataDF<-read.csv("data/wineStyleData2312.csv", stringsAsFactors = FALSE, header = TRUE, sep=";", quote = "",)
wineDataRange<-subset(wineDataDF, wineDataDF$usdPrice>=rangeD, wineDataDF$usdPrice<=rangeU, select=c("usdPrice", "colorFac", "country"))
dim(wineDataRange)
wineDataRange$name
wineDataRange
rangeU
wineDataDF$usdPrice<=rangeU
shiny::runApp()
wineDataRange<-filter(wineDataDF, usdPrice>=rangeD, usdPrice<=rangeU)
wineDataRange
shiny::runApp()
rangeD<-457
rangeU<-506
wineDataRange<-filter(wineDataDF, usdPrice>=rangeD, usdPrice<=rangeU)
wineDataRange
wineDataRange[1,]
wineDataRange[1,1]
wineDataRange[1,1]!=NA
wineDataRange[1,1]!='NA'
wineDataRange[1,1]=='NA'
wineDataRange$usdPrice[1]=='NA'
is.na(wineDataRange$usdPrice[1])
shiny::runApp()
shiny::runApp()
deployApp()
library(devtools)
setwd("~/DataAnalysis/Assignment/courseprojects/course9/courseProject")
deployApp()
library(shinyapps)
deployApp()
